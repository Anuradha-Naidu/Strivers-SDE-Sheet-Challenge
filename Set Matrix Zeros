//optimal soln - TC = 2(n*m) SC = 1 var

#include <bits/stdc++.h>
void setZeros(vector<vector<int>> &matrix)
{
	int n = matrix.size();
	int m = matrix[0].size();
	
	//int row[n]={0}; --> matrix[0][..]
	//int col[m]={0}; --> matrix[..][0]

//first part 
	int col0=1;

	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(matrix[i][j] == 0){
				//mark i-th row
				matrix[i][0] = 0;
				//mark j-th row
				if(j!=0){
					matrix[0][j] = 0;
				}
				else col0 = 0;
			}
			
		}
	}

	//sec part - marking elements inside M
	for(int i = 1;i<n;i++){
		for(int j = 1;j<m;j++){
			if(matrix[i][j] != 0){
				//check for row/col
				if(matrix[0][j] == 0 || matrix[i][0] == 0){
					matrix[i][j] = 0;
				}
			}
		}
	}

	// for RowCol

	if(matrix[0][0] == 0){
		for(int j=0;j<m;j++){
			matrix[0][j] = 0;
		}
	}

	if(col0 == 0){
		for(int i = 0;i<n;i++){
			matrix[i][0] = 0;
		}
	}

}

...............................................................................................................................................................................

//better soln - TC = n^2 SC = O(n)+O(m)

#include <bits/stdc++.h>
void setZeros(vector<vector<int>> &matrix)
{
	int n = matrix.size();
	int m = matrix[0].size();
	
	int row[n]={0};
	int col[m]={0};

	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(matrix[i][j] == 0){
				row[i] =1;
				col[j] =1;
			}
			
		}
	}

	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
                  if (row[i] || col[j]) {
                    matrix[i][j] = 0;
                  }
                }
        }
}
